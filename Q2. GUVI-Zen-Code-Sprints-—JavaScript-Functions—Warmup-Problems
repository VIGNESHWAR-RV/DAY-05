

      "GUVI : Zen Code-Sprints :— JavaScript Functions — Warmup Pbms"
	  

1.
 Write a function called “addFive”.
Given a number, “addFive” returns 5 added to that number.

Input:
addFive(5);
addFive(0);
addFive(-5);

Output:
10
5
0

<!--solution-->


function addFive(num) { 
    return  num+5;
}

console.log(addFive(5));
console.log(addFive(0));
console.log(addFive(-5));

<!--result-->

10
5
0

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

2.
Write a function called “getOpposite”.
Given a number, return its opposite.

Input:
getOpposite(5);
getOpposite(0);
getOpposite(-5);
getOpposite(“5a”);
getOpposite(5.5);

Output:
-5
0
5
-1
-1

<1--soution-->

function getOpposite(num){
    
if(num !== Math.floor(num)) return -1;
 else if(typeof(num)==="number") return num+(-2*num);
 else return -1;
 }
console.log(getOpposite(5));
console.log(getOpposite(0));
console.log(getOpposite(-5));
console.log(getOpposite('5a'));
console.log(getOpposite(5.5));

<!--result-->

-5
0
5
-1
-1

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

3.
Fill in your code that takes an number minutes and converts it to seconds.

Examples
toSeconds(5) ➞ 300
toSeconds(3) ➞ 180
toSeconds(2) ➞ 120

<!--solution-->

var min = 5;
function toSeconds(min) {
  return min*60;
}
var secs = toSeconds(min);

console.log(toSeconds(5));
console.log(toSeconds(3));
console.log(toSeconds(2));

<!--result-->

300
180
120


X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

4.
Create a function that takes a string and returns it as an integer.

Examples
toInteger(“6”) ➞ 6
toInteger(“1000”) ➞ 1000
toInteger(“12”) ➞ 12

<!--solution-->

 var mystr = "5";
 function toInteger(mystr) {
  return parseInt(mystr);
}
var myint = toInteger(mystr);

console.log(toInteger("6"));
console.log(toInteger("1000"));
console.log(toInteger("12"));

<!--result-->

6
1000
12

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

5.
Create a function that takes a number as an argument, increments the number by +1 and returns the result.

Examples
nextNumber(0) ➞ 1
nextNumber(9) ➞ 10
nextNumber(-3) ➞ -2

<!--solution-->

var myint = 0;
function nextNumber(myint) {
  let result = myint+1;
  return result;
}
var myNextint = nextNumber(myint);

console.log(nextNumber(0));
console.log(nextNumber(9));
console.log(nextNumber(-3));


<!--result-->

1
10
-2

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

6.
Create a function that takes an array and returns the first element.

Examples
getFirstElement([1, 2, 3]) ➞ 1
getFirstElement([80, 5, 100]) ➞ 80
getFirstElement([-500, 0, 50]) ➞ -500

<1--solution-->

var arr = [1, 2, 3];
function getFirstElement(arr) {
    return arr[0];
}
var data = getFirstElement(arr);

console.log(getFirstElement([1,2,3]);
console.log(getFirstElement([80,5,100]);
console.log(getFirstElement([-500,0,50]);


<!--result-->

1
80
-500

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

7.
Convert Hours into Seconds.
 Write a function that converts hours into seconds.
  
Examples
hourToSeconds(2) ➞ 7200
hourToSeconds(10) ➞ 36000
hourToSeconds(24) ➞ 86400

<!--solution-->

var arr = 8;
function hourToSeconds(arr) {
   return arr*3600;
}
var data = hourToSeconds(arr);

console.log(hourToSeconds(2));
console.log(hourToSeconds(10));
console.log(hourToSeconds(24));

<!--result-->

7200
36000
86400

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

8.
Find the Perimeter of a Rectangle
Create a function that takes height and width and finds the perimeter of a rectangle.

Examples
findPerimeter(6, 7) ➞ 26
findPerimeter(20, 10) ➞ 60
findPerimeter(2, 9) ➞ 22

<!--solution-->

function findPerimeter(num1,num2) {
     return (2*(num1+num2));
}
var peri = findPerimeter(6,7);

console.log(findPerimeter(6,7));
console.log(findPerimeter(20,10));
console.log(findPerimeter(2,9));


<!--result-->

26
60
22


X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

9.
Less Than 100?
Given two numbers, return true if the sum of both numbers is less than 100. Otherwise return false.

Examples
lessThan100(22, 15) ➞ true
// 22 + 15 = 37
lessThan100(83, 34) ➞ false
// 83 + 34 = 117

<!--solution-->

function lessThan100(num1,num2) {
  return ((num1 + num2)<100);
}
var res = lessThan100(22,15);

console.log(lessThan100(22,15));
console.log(lessThan100(83,34));
console.log(lessThan100(53,47));

<!--result-->

true
false
false


X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

10.
There is a single operator in JavaScript, capable of providing the remainder of a division operation. Two numbers are passed as parameters. The first parameter divided by the second parameter will have a remainder, possibly zero. Return that value.

Examples
remainder(1, 3) ➞ 1
remainder(3, 4) ➞ 3
remainder(-9, 45) ➞ -9
remainder(5, 5) ➞ 0

<!--solution-->

function remainder(num1,num2) {
  return num1%num2;
}
var res = remainder(1,3);

console.log(remainder(1,3));
console.log(remainder(3,4));
console.log(remainder(-9,45));
console.log(remainder(5,5));

<!--result-->

1
3
-9
0


X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

11.
Old macdonald had a farm:
MacDonald is asking you to tell him how many legs can be counted among all his animals. The farmer breeds three species:

turkey = 2 legs
horse = 4 legs
pigs = 4 legs

The farmer has counted his animals and he gives you a subtotal for each species. You have to implement a function that returns the total number of legs of all the animals.

Examples
CountAnimals(2, 3, 5) ➞ 36
CountAnimals(1, 2, 3) ➞ 22
CountAnimals(5, 2, 8) ➞ 50

<!--solution-->

function CountAnimals(tur,horse,pigs) {
   return ((tur*2)+(horse*4)+(pigs*4));
}
var legs = CountAnimals(2,3,5);

console.log(CountAnimals(2,3,5));
console.log(CountAnimals(1,2,3));
console.log(CountAnimals(5,2,8));

<!--result-->

36
22
50

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

12.
Frames Per Second.
Create a function that returns the number of frames shown in a given number of minutes for a certain FPS.

Examples
frames(1, 1) ➞ 60
frames(10, 1) ➞ 600
frames(10, 25) ➞ 15000

<!--solution-->

function frames(num1,num2) {
      return 60*num1*num2;
}
var fps = frames(1,2);

console.log(frames(1,1));
console.log(frames(10,1));
console.log(frames(10,25));


<!--result-->

60
600
15000

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

13.
Check if an Integer is Divisible By Five
Create a function that returns true if an integer is evenly divisible by 5, and false otherwise.

Examples
divisibleByFive(5) ➞ true
divisibleByFive(-55) ➞ true
divisibleByFive(37) ➞ false

<!--solution-->

function divisibleByFive(num1) {
      if(num1%5===0) {return "true"}
      else {return "false";}
}
var divisible = divisibleByFive(5);

console.log(divisibleByFive(5));
console.log(divisibleByFive(-55));
console.log(divisibleByFive(37));

<!--result-->

true
true
false

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

14.
Write a function called “isEven”.
Given a number, “isEven” returns whether it is even.

Input:
isEven(12);
isEven(0);
isEven(11);
isEven(“11h”);

Output:
true
true
false
-1

<!--solution-->

function isEven(num){
    if(typeof(num)!=="number") return -1;
    else if(num%2===0) return "true";
	else return "false";
}
var even = isEven(5);

console.log(isEven(12));
console.log(isEven(0));
console.log(isEven(11));
console.log(isEven("11h"));

<!--result-->

true
true
false
-1

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

15.
Write a function called “areBothOdd”.
Given 2 numbers, “areBothOdd” returns whether or not both of the given numbers are odd.

Input:
areBothOdd(1, 3);
areBothOdd(1, 4);
areBothOdd(2, 3);
areBothOdd(0, 0);

Output:
true
flase
flase
flase

<!--solution-->

function areBothOdd(num1, num2){
     if ((num1%2!==0) && (num2%2!==0)) return "true";
	 else return "fasle";
}

console.log(areBothOdd(1,3));
console.log(areBothOdd(1,4));
console.log(areBothOdd(2,3));
console.log(areBothOdd(0,0));

<!--result-->

true
fasle
fasle
fasle

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

16.
Write a function called “getFullName”.
Given a first and a last name, “getFullName” returns a single string with the given first and last names separated by a single space.

Input:
getFullName(“GUVI”, “GEEK”);
getFullName(“GUVI”, );
getFullName(, “GEEK”);
getFullName(“”, “”);

Output:
“GUVI GEEK”
“GUVI”
“GEEK”
“”

<!--solution-->

function getFullName(firstName="", lastName=""){
     return `${firstName} ${lastName}`;
}

console.log(getFullName("GUVI","GEEK"));
console.log(getFullName("GUVI",));
console.log(getFullName("GEEK"));
console.log(getFullName("",""));

<!--result-->

GUVI GEEK
GUVI 
GEEK 
 
 
X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

17.
Write a function called “getLengthOfWord”.
Given a word, “getLengthOfWord” returns the length of the given word.

Input:
getLengthOfWord(“GUVI”);
getLengthOfWord(“”);
getLengthOfWord();
getLengthOfWord(9);

Output:
4
0
-1
-1

<!--solution-->

function getLengthOfWord(word1){
    if(typeof(word)==="string") return word.length;
     else return -1;	
}

console.log(geyLengthOfWord("GUVI"));
console.log(geyLengthOfWord(""));
console.log(geyLengthOfWord());
console.log(geyLengthOfWord(9));

<!--result-->

4
0
-1
-1

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

18.
Write a function called “isSameLength”.
Given two words, “isSameLength” returns whether the given words have the same length.

Input:
isSameLength(“GUVI”, “GEEK”);

Output:
true

<!--solution-->


function isSameLength(word1, word2){
  if((word1.length)===(word2.length)) return "true";
  else return "false";
}
console.log(isSameLength("GUVI","GEEK"));


<!--result-->

true

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

19.
Create a function to calculate the distance between two points defined by their x, y coordinates

<!--solution-->

function getDistance(x1,y1,x2,y2){
   return `the x is ${x2-x1} and y is ${y2-y1}`;
}
console.log(getDistance(100,200,300,400));

<!--result-->

the x is 200 and y is 200


X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

20.
Write a function called “getNthElement”.
Given an array and an integer, “getNthElement” returns the element at the given integer, within the given array. If the array has a length of 0, it should return ‘undefined’.

Input:
getNthElement([1, 3, 5], 1);
Output:
3

<!--solution-->

function getNthElement(array,n){
   if(array.length!==0){
     return array[n];
	 }else{
	 return "undefined";
	 }
}

console.log(getNthElement([1,3,5],1));

<!--result-->

3

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

21.
Write a function called “getLastElement”.
Given an array, “getLastElement” returns the last element of the given array. If the given array has a length of 0, it should return ‘-1’.

Input:
getLastElement([1, 2, 3, 4]);

Output:
4

<!--solution-->

function getLastElement(array){
  if (array.length !== 0){
     return array[array.length-1];
  }
  else{ return -1;}
}

console.log(getLastElement([1,2,3,4]));

<!--result-->

4

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

22.
Write a function called “getProperty”.
Given an object and a key, “getProperty” returns the value of the property at the given key. If there is no property at the given key, it should return undefined.

var obj = {
mykey: “value”
};

Input:
getProperty(obj,’mykey’);
getProperty(obj,’dummykey’);

Output:
value
NA

<!--solution-->

var obj1 = {
 mykey: "value"
};
function getProperty(obj, key) {
   if(obj[key] !== "undefined") return obj[key];
   if(obj[key]) return "undefined";
}

console.log(getProperty(obj1,'mykey'));
console.log(getProperty(obj1,'dummykey'));

<!--result-->

value
undefined

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

23.
Write a function called “addProperty”.
Given an object and a key, “addProperty” adds a new property on the given object with a value of true.

var obj = {
}
Input:
addProperty(obj, “mykey”);
Output:
{
mykey: true
}

<!--solution-->

var obj = {
 mykey: “value”
};
function addProperty(obj, key){
   return obj[key] = "true";   
}

addProperty(obj,"key");
console.log(obj);

<!--result-->

{ mykey: 'value', key: 'true' }

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

24.
Write a function called “removeProperty”.
Given an object and a key, “removeProperty” removes the given key from the given object.

Input:
removeProperty(obj, “name”);

Output:
undefined

<!--solution-->

var obj = {
 mykey: "value",
 name : "RV"
};

function removeProperty(obj, key){
      delete obj[key];
}
removeProperty(obj,"name");
console.log(obj);

<!--result-->

{ mykey: 'value' }

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

25.
Return an array, where the first element is the count of positives numbers and the second element is sum of negative numbers.

<!--solution-->

var arr = [-5, 10, -3, 12, -9, 5, 90, 0, 1];
function countPositivesSumNegatives(arr) {
  let positive = 0;
  let negative = 0;
   for(let i of arr){
   if(i>0){positive ++;}
   else if(i<0) {negative++;}
  }
   return [positive,negative];
}

let ar2 = countPositivesSumNegatives((arr));
console.log(ar2);

<!--result-->

[ 5, 3 ]


X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

26.
Create a function that receives an array of numbers and returns an array containing only the positive numbers

<!--solution-->

function getPositives(ar)
{ let list = [];
  for(let i of ar){
   if(i>0) list.push(i);
   }
   return list;
 }

var ar = [-5, 10, -3, 12, -9, 5, 90, 0, 1];
var ar2 = getPositives(ar);
console.log(ar2);

<!--result-->

[ 10, 12, 5, 90, 1 ]

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

27.
Write a function `powersOfTwo` which will return list of all powers of 2 from 0 to n (where n is an exponent).

n = 0 -> 2⁰ -> [1]
n = 1 -> 2⁰, 2¹ -> [1,2]
n = 2 -> 2⁰, 2¹, 2² -> [1,2,4]

Input:
powersOfTwo(0)
powersOfTwo(1)
powersOfTwo(2)

Output:
1
1,2
1,2,4

<!--solution-->

let result = [];
function powersOfTwo(n){
    result=[];
   for(let i=0;i<=n;i++){
     result.push(Math.pow(2,i));
   }
}
powersOfTwo(0);
console.log(result);
powersOfTwo(1);
console.log(result);
powersOfTwo(2);
console.log(result);

<!--result-->

[ 1 ]
[ 1, 2 ]
[ 1, 2, 4 ]

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

28.
Find the maximum number in an array of numbers

<1--solution-->

function findMax(ar)
{
  return Math.max(...ar);
  }
var ar = [-5, 10, -3, 12, -9, 5, 90, 0, 1];
var max = findMax(ar);
console.log("Max: ", max);

<!--result-->

    Max: 90

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

29.
Print the first 100 prime numbers

<!--solution-->

console.log(printPrimes(100));
// Function prints the first nPrimes numbers
function printPrimes(nPrimes){
    let array = [];
   for(let i=2;i<=nPrimes;i++){
       let count = 0;
       for(let j=1;j<i;j++){
           if(i%j===0) count++;
       }
       if(count===1){
           array.push(i);
       }
   }
   return array;
}

<!--result-->

[ 2,
  3,
  5,
  7,
  11,
  13,
  17,
  19,
  23,
  29,
  31,
  37,
  41,
  43,
  47,
  53,
  59,
  61,
  67,
  71,
  73,
  79,
  83,
  89,
  97 ]



X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

30.
Create a function that will return in an array the first “nPrimes” prime numbers greater than a particular number “startAt”

<!--solution-->

function getPrimes(nPrimes , startAt){
let list = [];
for(let i=startAt;i<(startAt*nPrimes);i++){
      let divs = 0;
for(let j=1;j<i;j++){
    if(i%j===0) divs++;	 
}
 if(divs===1) list.push(i);
 if (list.length===nPrimes) return list;
 }
}
console.log(getPrimes(10,100));

<!--result-->

[ 101, 103, 107, 109, 113, 127, 131, 137, 139, 149 ]

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

31.
Reverse a string

<!--solution-->

var s = reverseString("JavaScript");
console.log(s);
function reverseString(s)
{
     return s.split("").reverse().join("");
}

<!--result-->

tpircSavaJ

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

32.
Create a function that will merge two arrays and return the result as a new array

<!--solution-->

var ar1 = [1, 2, 3];
var ar2 = [4, 5, 6];
let ar = [];

function addArrays(ar1,ar2){
 ar = [...ar1,...ar2];
 }
addArrays(ar1,ar2);
console.log(ar);

<!--result-->

[ 1, 2, 3, 4, 5, 6 ]


X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X

33.
Calculate the sum of numbers received in a comma delimited string

<!--solution-->

console.log(sumCSV("1.5,2.3,3.1,4,5.5,6,7,8,9,10.9"));

function sumCSV(num){
    let sum = 0;
    num = num.split(",");
	for(let i of num){
	   sum += +i;
    }
    return sum;
}

<!--result-->

57.3

X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X